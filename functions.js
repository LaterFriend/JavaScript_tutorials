// Function Declaration 
function makeBread(qty) { //parametr - vstupn√≠ promƒõnn√© pou≈æit√© p≈ôi tvorbƒõ funkce
    const bread = "üçû".repeat(qty);

    console.log(bread);
    
    return bread;
}

const loaves = makeBread(7); //argument (skuteƒçn√° hodnota pou≈æ√≠van√° p≈ôi vol√°n√≠ fce)
console.log(loaves);

// Function declaration je hoisted (funkci m≈Ø≈æeme pou≈æ√≠vat v k√≥du d≈ô√≠ve ne≈æ dojde k jej√≠ vytvo≈ôen√≠ - jeliko≈æ JS um√≠st√≠ v≈°echny function declarations na zaƒç√°tek k√≥du)
// Function Expression nen√≠ hoisted

// Function Expression
    // Vytvo≈ôili jsme promƒõnnou, kter√© jsme jako hodnotu p≈ôi≈ôadili anonymn√≠ funkci (funkce beze jm√©na)
const makeBeer = function(qty) {
    return "üç∫".repeat(qty);
}
const beers = makeBeer(7);
console.log(beers);
// Lep≈°√≠ pou≈æ√≠vat Function Expression -> Nen√≠ hoisted a je tud√≠≈æ vidƒõt kam v k√≥du jednoznaƒçnƒõ pat≈ô√≠


const makeBeer2 = function beerFun2(qty) {
    return 'üç∫'.repeat(qty);
} 
// I kdy≈æ to nen√≠ ƒçast√©, je mo≈æno pou≈æ√≠t neanonymn√≠ fci p≈ôi function expression

// Immediately invoked function expression (IIFE)
// IIFE - okam≈æitƒõ vyvolan√° function expression
const z = (function(qty) {
    return "üç∫".repeat(qty);
}(10)); //stejn√© jako: const beers = makeBeer(10)
console.log(z)


// Arguments and Parametrs
//Positional
function makeBreakfast (main, side, drink) {
    console.log(arguments); // Zobrazen√≠ argument≈Ø v run-timu
    return `Breakfast includes ${main}, ${side}, and ${drink}`;
}
const breakfast = makeBreakfast("ü•û", "ü•ì", "ü•õ");
console.log(breakfast);

//Named params
function makeLunch (opts) {
    // tato funkce m√° pouze jeden argument, ale tento argument je objekt, kter√Ω m≈Ø≈æe obsahovat v√≠ce hodnot
    // lehƒç√≠ pro roz≈°√≠≈ôen√≠ v√≠ce argumenty v budoucnu bez nutnosti p≈ôepisu funkce
    // nemus√≠me se starat o po≈ôad√≠ vkl√°dan√Ωch argument≈Ø
    const {main, side, drink} = opts;
    return `Lunch includes ${main}, ${side} and ${drink}`;
}
const Lunch = makeLunch({main: "üåÆ", side: "üçü", drink: "üßÉ"});
console.log(Lunch);

//Rest params
function makeDinner (...args) {
    // Tato definice n√°m umo≈æ≈àuje zavolat funkci s v√≠ce poziƒçn√≠mi argumenty a pot√© k argument≈Øm p≈ôistupovat jako k array uvnit≈ô tƒõla funkce
    return `Dinner includes the following items: ${args.join(" ")} and the third item is: ${args[2]}`;
}
const Dinner = makeDinner("ü•ù", "üåΩ", "üçû", "üç∫");
console.log(Dinner);

//Arrow Function -> velmi kompaktn√≠
const beerFun = function (qty) {
    return "üç∫".repeat(qty);
}
console.log(beerFun(2));


const makeWine = (qty) => "üç∑".repeat(qty);
//pokud vynech√°me {} tak funkce vr√°t√≠ hodnotu i bez keywordu return
const makeWine2 = (qty) => { 
    return "üç∑".repeat(qty)
};
// Funkce dƒõlaj√≠ naprosto stejnou vƒõc -> p≈ôij√≠maj√≠ argument qty a vrac√≠ dan√Ω poƒçet v√≠n
// Druh√Ω z√°pis se li≈°√≠ akor√°t t√≠m, ≈æe pokud p≈ôid√°me {}, tak m≈Ø≈æeme k√≥d uvnit≈ô tƒõla funkce standartnƒõ roz≈°i≈ôovat
console.log(makeWine(4));
console.log(makeWine2(4));
// arrow funkce budou v≈ædy Function Expression -> nelze deklarovat funkci pomoc√≠ arrow z√°pisu
// Arrow funkce nemaj√≠ vlastn√≠ .this object (v√≠ce v objects.js)
// Pokud je to mo≈æn√© -> pou≈æ√≠vat Arrow funkce


//Pure vs Impure functions
let x = 0; //global promƒõnn√°
const impure = () => {
    x++; 
    return x**2;
}
//IMPURE funkce tuto global promƒõnnou mutuje a pot√© ji zmƒõnƒõnou vrac√≠
// IMPURE funkce operuj√≠ na promƒõnn√Ωch mimo jejich local scope -> pr√°ce s k√≥dem je pot√© slo≈æitƒõj≈°√≠

const pure = (x) => x**2;
// PURE funkce z√°vis√≠ pouze na vstupn√≠ch parametrech, z√°rove≈à tak√© upravuje promƒõnn√© pouze ve sv√© local scope
// PURE funkce tak√© negeneruje ≈æ√°dn√© vedlej≈°√≠ efekty
// Takov√Ωto k√≥d je lep≈°√≠ na ƒçten√≠ a pr√°ce s n√≠m je jednodu≈°≈°√≠



// Higher order functions -> HOF
    // First class functions = funkci m≈Ø≈æeme p≈ôedat jako argument jin√© funkci, funkce m≈Ø≈æe vracet jinou funkci
    // Bƒõ≈æn√© u asynchronn√≠ho programov√°n√≠ 

// Dobr√Ω p≈ô√≠klad HOF funkce, je funkce "setTimeout" (build-in funkce, kter√° n√°m umo≈æn√≠ spou≈°tƒõt k√≥d po urƒçit√© ƒçasov√© odezvƒõ)
    // Funkce kterou chceme po delayi spustit = 1. argument, d√©lka delaye v ms = 2. argument
let haveFun = () => console.log("fun!");
setTimeout(haveFun, 100);
setTimeout(() => console.log("fun!"), 500); //2 rozd√≠ln√© z√°pisy se stejn√Ωm v√Ωsledkem

// Pomoc√≠ HOF m≈Ø≈æeme nahrazovat for-loopy
const arr = [1,2,3,4];
const squared = [];
for (const x of arr) { // standartn√≠ JS for-loop
    squared.push(x**2);
}
console.log(squared);
// Array.map -> HOF, kter√° p≈ôij√≠m√° funkci jako prvn√≠ argument a tuto funkci zavol√° na ka≈æd√Ω item v dan√©m array
// stejn√© jako funkce map() v pythonu
const squared2 = arr.map(x => x**2);
    // "x" reprezentuje polo≈æku v dan√©m array
    // "x**2" je return value z funkce
const rand = arr.map(x => `ƒç√≠slo je: ${x}`);
console.log(rand);
console.log(squared);

const squareIt = x => x**2; // Pou≈æit√≠ dan√© funkce s Function expresion s descriptive jm√©nem - v√≠ce reusable
const squareIt_ = arr.map(squareIt); 
console.log(squareIt_);

//HOF, Closure
    // lexical enviroment - mƒõn√≠ se kdy≈æ vytv√°≈ô√≠me fci
const a = 1;
// lexical enviroment A
    const outer = () => {
        const b = 2;
        // lexical enviroment B
        const inner = () => {
            const c = 3;
            // lexical enviroment C
            return a+b+c;
        }
        return inner;
    }
// inner funkce m√° p≈ô√≠stup k local promƒõnn√© outer funkce, ale outer funkce nem√° p≈ô√≠stup k promƒõnn√Ωm inner funkce

function useCat() {
    let name = "baby kitten";
    
    // vrac√≠me array, kter√Ω obsahuje 2 funkce
        // 1. funkce je funkce, kter√° k jak√©mukoli argumentu p≈ôid√° slovo "Meow"
        // 2. funkce je setter, kter√Ω mƒõn√≠ promƒõnnou "name" podle dan√©ho argumentu
    // inner funkce v array maj√≠ p≈ô√≠stup k promƒõnn√Ωm (promƒõnn√° "name") definovan√Ωm uvnit≈ô outer funkce ("useCat()") 
    return [
        () => `Meow ${name}`,
        (newName) => name = newName
    ]
}

const [ meow, setName ] = useCat(); // React hooks? 
// return funkce useCat() nyn√≠ budeme moct pou≈æ√≠t jako meow() a setName(newName)
console.log(meow());
setName("Peter");
console.log(meow());
