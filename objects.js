// object je kolekce vlastnost√≠, kde ka≈æd√° vlastnost je p√°r name(key) hodnoty a value hodnoty
// velmi podobn√© python dict data typu
const obj = {}; // <- object literal 
const obj_a = {
    rabbit: 'üï≥Ô∏è', //<-- property [property name: property value] -> key value p√°r
    // property name mus√≠ b√Ωt hodnota, u kter√© je mo≈æn√© p≈ôev√©st j√≠ do stringu
    // property value m≈Ø≈æe b√Ωt cokoliv chceme -> string, numeric, object, function, ... 
    year: 1923,
    // i kdy≈æ je object const variable -> i tak m≈Ø≈æeme upravovat jeho properties po vytvo≈ôen√≠
};

obj['rabbit'] = 'üêá'; // √∫prava property
console.log(obj['rabbit']); // zobrazen√≠ property

//object constructor syntax
const obj_const = new Object();
obj_const.rabbit = 'üê∞'; // nastaven√≠ object properties pomoc√≠ dot notation (object constructor)
// Dot notation vypad√° l√©pe, ale je t≈ôeba aby property names nebyli stringy zaƒç√≠naj√≠c√≠ ƒç√≠slem a aby byli bez mezer. Nap≈ô. 1rabbit nebo some rabbit

console.log(obj_const.rabbit);

// vytvo≈ôen√≠ Objectu pomoc√≠ statick√© metody na Object t≈ô√≠dƒõ 
    // toto se moc nepou≈æ√≠v√° k vytvo≈ôen√≠ pr√°zdn√©ho Objectu, ale sp√≠≈°e k pou≈æit√≠ existuj√≠c√≠ Objectu jako prototypu
const organism = { // standartn√≠ Object, obsahuj√≠c√≠ n√°hodn√© ƒç√≠slo v "dna" property
    dna: Math.random()
};

const obj_stat = Object.create(organism); // vytv√°≈ô√≠me pomoc√≠ statick√© metody nov√Ω Object "obj_stat", kdy p≈ôed√°v√°me "organism" Object jako prototyp
console.log(obj_stat.dna); //Tuto property m≈Ø≈æeme zavolat, jeliko≈æ existuje v prototypu dan√©ho Objectu (organism)
console.log(Object.getPrototypeOf(obj_stat)===organism); // zji≈°≈•ujeme zda je "organism" prototypem k Objectu "obj_stat"
// getPrototypeOf vrac√≠ prototyp (tj. hodnota vnit≈ôn√≠ vlastnosti [[Prototype]] dan√©ho Object) -> vrac√≠ Object, kter√Ω jsme pou≈æili jako prototyp k vytvo≈ôen√≠ dan√©ho Objectu



//Object defineProperty
const obj_b = Object.create({});
Object.defineProperty(obj_b, "unicorn", { // 1. argument: n√°zev Objectu, 2. argument: property name, 3. argument: Object -> descriptor (kde upravujeme r≈Øzn√© mo≈ænosti pro danou property)
    value: 'ü¶Ñ',
});
console.log(obj_b.unicorn);


//structuring 
const spider = "üï∑Ô∏è";
const legs = 8;
const random = () => Math.random().toString(36).slice(-5);
const obj_spider = {
    spider, // Objectu se vytvo≈ô√≠ nov√© properties, kter√© se budou jmenovat stejnƒõ jako n√°zev promƒõnn√© a budou m√≠t i stejn√© values jako dan√© promƒõnn√© (shorthand syntax)
    legs,

    legs: 10, // pokud p≈ôid√°me property s dan√Ωm jm√©nem znova s jinou value -> p≈ôep√≠≈°eme jej√≠ value (right side wins)
    legs: 29,
    web: '',
    [random()]: true, // computed property names => (nap≈ô. z funkce) mus√≠me um√≠stit do hranat√Ωch z√°vorek [computed()]: value
    makeWeb: function () { // Object properties mohou m√≠t jako svoj√≠ value funkci => Method (metoda)
    // Metodu m≈Ø≈æeme definovat pomoc√≠ shorthand syntaxe: makeWeb() { }
    // get, set keywords pro definov√°n√≠ getteru a setteru 
        this.web+="üï∏Ô∏èüï∏Ô∏èüï∏Ô∏è";
        // pokud definujeme metodu uvnit≈ô funkce -> this odkazuje na tento dan√Ω Object
        // pokud by jsme definovali danou metodu pomoc√≠ arrow function syntaxe -> this by odkazovalo na global scope
        return this; // this keyword zde odkazuje na dan√Ω Object -> ka≈æd√° metoda kterou zavol√°m bude nyn√≠ vracet odkaz na dan√Ω Object
    }
};
console.log(obj_spider.makeWeb().makeWeb().makeWeb()); //≈òetƒõzen√≠ metod -> dan√° metoda mus√≠ vracet this (odkaz na Object na kter√©m zavol√°me dal≈°√≠ metodu v ≈ôetƒõzci)
console.log(obj_spider.spider);
console.log(obj_spider.legs);
console.log(obj_spider) 
//destructuring
//const { spider, legs } = obj_spider;  -> vytvo≈ô√≠me promƒõnn√© "spider" a "legs" obsahuj√≠c√≠ values definovan√© v Objectu (zde nefunguje proto≈æe promƒõnn√© "spider" a "legs" definujeme v√Ω≈°e)
const { spider: mySpider, legs: myLegs } = obj_spider; // pokud chceme vytvo≈ôen√© promƒõnn√© nazvat jinak, aby nap≈ô. nedo≈°lo ke kolizi apod.
console.log(mySpider, myLegs); // Hodnoty properties (spider a legs) nav√°≈æeme na promƒõnn√© (mySpider a myLegs)

// Object references
